{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/components/Layout/SplitScreen.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\ninterface SplitScreenProps {\n  sidebar: ReactNode;\n  content: ReactNode;\n}\n\nexport default function SplitScreen({ sidebar, content }: SplitScreenProps) {\n  return (\n    <div className=\"flex h-full\">\n      <div className=\"w-80 border-r\">\n        {sidebar}\n      </div>\n      <div className=\"flex-1\">\n        {content}\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;;AAOe,SAAS,YAAY,EAAE,OAAO,EAAE,OAAO,EAAoB;IACxE,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;0BACZ;;;;;;0BAEH,8OAAC;gBAAI,WAAU;0BACZ;;;;;;;;;;;;AAIT"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/services/openai.ts"],"sourcesContent":["import OpenAI from 'openai';\nimport { Assistant, Message } from '@/types';\n\nif (!process.env.NEXT_PUBLIC_OPENAI_API_KEY) {\n  throw new Error('Missing OpenAI API Key');\n}\n\nconst openai = new OpenAI({\n  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\n\nexport async function createAssistant(config: Partial<Assistant>) {\n  try {\n    const assistant = await openai.beta.assistants.create({\n      name: config.name,\n      instructions: config.instructions,\n      tools: (config.tools || []) as any,\n      model: config.model || \"gpt-4o\",\n      temperature: config.temperature,\n      top_p: config.top_p\n    });\n    return assistant;\n  } catch (error) {\n    console.error('Error creating assistant:', error);\n    throw error;\n  }\n}\n\nexport async function updateAssistant(assistantId: string, config: Partial<Assistant>) {\n  try {\n    const assistant = await openai.beta.assistants.update(\n      assistantId,\n      {\n        name: config.name,\n        instructions: config.instructions,\n        tools: (config.tools || []) as any,\n        model: config.model,\n        temperature: config.temperature,\n        top_p: config.top_p\n      }\n    );\n    return assistant;\n  } catch (error) {\n    console.error('Error updating assistant:', error);\n    throw error;\n  }\n}\n\nexport async function processMessage(assistantId: string, content: string) {\n  try {\n    const thread = await openai.beta.threads.create();\n    await openai.beta.threads.messages.create(thread.id, {\n      role: 'user',\n      content: content\n    });\n\n    const run = await openai.beta.threads.runs.create(thread.id, {\n      assistant_id: assistantId\n    });\n\n    let runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n    \n    while (runStatus.status !== 'completed') {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      runStatus = await openai.beta.threads.runs.retrieve(thread.id, run.id);\n\n      if (runStatus.status === 'failed') {\n        throw new Error('Run failed');\n      }\n    }\n\n    const messages = await openai.beta.threads.messages.list(thread.id);\n    const lastMessage = messages.data\n      .filter(msg => msg.role === 'assistant')\n      .pop();\n\n    if (!lastMessage?.content[0]) return 'No response';\n    \n    const content_block = lastMessage.content[0];\n    if (content_block.type === 'text') {\n      return content_block.text.value;\n    }\n    \n    return 'Unsupported response type';\n  } catch (error) {\n    console.error('Error processing message:', error);\n    throw error;\n  }\n}\n\n// Add text-to-speech function\nexport async function generateSpeech(text: string) {\n  try {\n    const mp3 = await openai.audio.speech.create({\n      model: \"tts-1\",\n      voice: \"alloy\",\n      input: text,\n    });\n\n    const blob = new Blob([await mp3.arrayBuffer()], { type: 'audio/mpeg' });\n    return URL.createObjectURL(blob);\n  } catch (error) {\n    console.error('Error generating speech:', error);\n    throw error;\n  }\n}\n\ntype OpenAIVoice = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\n\nexport class VoiceService {\n  private static instance: VoiceService;\n  private openai: OpenAI;\n  private audioContext: AudioContext | null = null;\n  private audioQueue: string[] = [];\n  private isPlaying: boolean = false;\n\n  private constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\n      dangerouslyAllowBrowser: true\n    });\n    \n    if (typeof window !== 'undefined') {\n      this.audioContext = new AudioContext();\n    }\n  }\n\n  static getInstance(): VoiceService {\n    if (!VoiceService.instance) {\n      VoiceService.instance = new VoiceService();\n    }\n    return VoiceService.instance;\n  }\n\n  async textToSpeech(text: string, voice: OpenAIVoice = 'alloy'): Promise<void> {\n    try {\n      const response = await this.openai.audio.speech.create({\n        model: \"tts-1\",\n        voice,\n        input: text,\n      });\n\n      const arrayBuffer = await response.arrayBuffer();\n      if (this.audioContext) {\n        const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n        const source = this.audioContext.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(this.audioContext.destination);\n        source.start(0);\n      }\n    } catch (error) {\n      console.error('Error in text-to-speech:', error);\n      throw error;\n    }\n  }\n} "],"names":[],"mappings":"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"}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/components/Assistant/AssistantCreator.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Assistant } from '@/types';\nimport { createAssistant } from '@/services/openai';\n\nexport default function AssistantCreator({\n  onClose,\n  onCreated\n}: {\n  onClose: () => void;\n  onCreated: (assistant: Assistant) => void;\n}) {\n  const [formData, setFormData] = useState({\n    name: '',\n    instructions: '',\n    model: 'gpt-4',\n    temperature: 0.7,\n    tools: [{ type: 'code_interpreter' } as const]\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const assistant = await createAssistant(formData);\n      onCreated(assistant as Assistant);\n    } catch (error) {\n      console.error('Error creating assistant:', error);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n      <div className=\"bg-white p-6 rounded-lg w-96\">\n        <h2 className=\"text-xl font-bold mb-4\">Create New Assistant</h2>\n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-4\">\n            <label className=\"block mb-2\">Name</label>\n            <input\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              className=\"w-full border rounded p-2\"\n              required\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block mb-2\">Instructions</label>\n            <textarea\n              value={formData.instructions}\n              onChange={(e) => setFormData({ ...formData, instructions: e.target.value })}\n              className=\"w-full border rounded p-2\"\n              rows={4}\n              required\n            />\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block mb-2\">Temperature</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.1\"\n              value={formData.temperature}\n              onChange={(e) => setFormData({ ...formData, temperature: parseFloat(e.target.value) })}\n              className=\"w-full\"\n            />\n            <span>{formData.temperature}</span>\n          </div>\n          <div className=\"flex justify-end gap-2\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 border rounded\"\n            >\n              Cancel\n            </button>\n            <button\n              type=\"submit\"\n              className=\"px-4 py-2 bg-blue-500 text-white rounded\"\n            >\n              Create\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEe,SAAS,iBAAiB,EACvC,OAAO,EACP,SAAS,EAIV;IACC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QACvC,MAAM;QACN,cAAc;QACd,OAAO;QACP,aAAa;QACb,OAAO;YAAC;gBAAE,MAAM;YAAmB;SAAW;IAChD;IAEA,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,IAAI;YACF,MAAM,YAAY,MAAM,CAAA,GAAA,yHAAA,CAAA,kBAAe,AAAD,EAAE;YACxC,UAAU;QACZ,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;QAC7C;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAAyB;;;;;;8BACvC,8OAAC;oBAAK,UAAU;;sCACd,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAM,WAAU;8CAAa;;;;;;8CAC9B,8OAAC;oCACC,MAAK;oCACL,OAAO,SAAS,IAAI;oCACpB,UAAU,CAAC,IAAM,YAAY;4CAAE,GAAG,QAAQ;4CAAE,MAAM,EAAE,MAAM,CAAC,KAAK;wCAAC;oCACjE,WAAU;oCACV,QAAQ;;;;;;;;;;;;sCAGZ,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAM,WAAU;8CAAa;;;;;;8CAC9B,8OAAC;oCACC,OAAO,SAAS,YAAY;oCAC5B,UAAU,CAAC,IAAM,YAAY;4CAAE,GAAG,QAAQ;4CAAE,cAAc,EAAE,MAAM,CAAC,KAAK;wCAAC;oCACzE,WAAU;oCACV,MAAM;oCACN,QAAQ;;;;;;;;;;;;sCAGZ,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAM,WAAU;8CAAa;;;;;;8CAC9B,8OAAC;oCACC,MAAK;oCACL,KAAI;oCACJ,KAAI;oCACJ,MAAK;oCACL,OAAO,SAAS,WAAW;oCAC3B,UAAU,CAAC,IAAM,YAAY;4CAAE,GAAG,QAAQ;4CAAE,aAAa,WAAW,EAAE,MAAM,CAAC,KAAK;wCAAE;oCACpF,WAAU;;;;;;8CAEZ,8OAAC;8CAAM,SAAS,WAAW;;;;;;;;;;;;sCAE7B,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCACC,MAAK;oCACL,SAAS;oCACT,WAAU;8CACX;;;;;;8CAGD,8OAAC;oCACC,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQb"}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/components/Assistant/AssistantSettings.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Assistant } from '@/types';\nimport { updateAssistant } from '@/services/openai';\nimport OpenAI from 'openai';\n\nif (!process.env.NEXT_PUBLIC_OPENAI_API_KEY) {\n  throw new Error('Missing OpenAI API Key');\n}\n\nconst openai = new OpenAI({\n  apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Note: In production, you should use API routes\n});\n\nexport default function AssistantSettings({\n  assistant,\n  onUpdate\n}: {\n  assistant: Assistant;\n  onUpdate: (assistant: Assistant) => void;\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState(assistant);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const updated = await updateAssistant(assistant.id, formData);\n      onUpdate(updated as Assistant);\n      setIsEditing(false);\n    } catch (error) {\n      console.error('Error updating assistant:', error);\n    }\n  };\n\n  if (!isEditing) {\n    return (\n      <div className=\"p-4 border rounded\">\n        <h3 className=\"font-bold mb-2\">{assistant.name}</h3>\n        <p className=\"text-sm mb-4\">{assistant.instructions}</p>\n        <button\n          onClick={() => setIsEditing(true)}\n          className=\"text-blue-500\"\n        >\n          Edit Settings\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"p-4 border rounded\">\n      <div className=\"mb-4\">\n        <label className=\"block mb-2\">Name</label>\n        <input\n          type=\"text\"\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          className=\"w-full border rounded p-2\"\n        />\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block mb-2\">Instructions</label>\n        <textarea\n          value={formData.instructions}\n          onChange={(e) => setFormData({ ...formData, instructions: e.target.value })}\n          className=\"w-full border rounded p-2\"\n          rows={4}\n        />\n      </div>\n      <div className=\"mb-4\">\n        <label className=\"block mb-2\">Temperature</label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"1\"\n          step=\"0.1\"\n          value={formData.temperature || 0.7}\n          onChange={(e) => setFormData({ ...formData, temperature: parseFloat(e.target.value) })}\n          className=\"w-full\"\n        />\n        <span>{formData.temperature}</span>\n      </div>\n      <div className=\"flex justify-end gap-2\">\n        <button\n          type=\"button\"\n          onClick={() => setIsEditing(false)}\n          className=\"px-4 py-2 border rounded\"\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          className=\"px-4 py-2 bg-blue-500 text-white rounded\"\n        >\n          Save\n        </button>\n      </div>\n    </form>\n  );\n} "],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;;AAEA,uCAA6C;;AAE7C;AAEA,MAAM,SAAS,IAAI,gJAAA,CAAA,UAAM,CAAC;IACxB,MAAM;IACN,yBAAyB,KAAK,iDAAiD;AACjF;AAEe,SAAS,kBAAkB,EACxC,SAAS,EACT,QAAQ,EAIT;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzC,MAAM,eAAe,OAAO;QAC1B,EAAE,cAAc;QAChB,IAAI;YACF,MAAM,UAAU,MAAM,CAAA,GAAA,yHAAA,CAAA,kBAAe,AAAD,EAAE,UAAU,EAAE,EAAE;YACpD,SAAS;YACT,aAAa;QACf,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,6BAA6B;QAC7C;IACF;IAEA,IAAI,CAAC,WAAW;QACd,qBACE,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BAAkB,UAAU,IAAI;;;;;;8BAC9C,8OAAC;oBAAE,WAAU;8BAAgB,UAAU,YAAY;;;;;;8BACnD,8OAAC;oBACC,SAAS,IAAM,aAAa;oBAC5B,WAAU;8BACX;;;;;;;;;;;;IAKP;IAEA,qBACE,8OAAC;QAAK,UAAU;QAAc,WAAU;;0BACtC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,WAAU;kCAAa;;;;;;kCAC9B,8OAAC;wBACC,MAAK;wBACL,OAAO,SAAS,IAAI;wBACpB,UAAU,CAAC,IAAM,YAAY;gCAAE,GAAG,QAAQ;gCAAE,MAAM,EAAE,MAAM,CAAC,KAAK;4BAAC;wBACjE,WAAU;;;;;;;;;;;;0BAGd,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,WAAU;kCAAa;;;;;;kCAC9B,8OAAC;wBACC,OAAO,SAAS,YAAY;wBAC5B,UAAU,CAAC,IAAM,YAAY;gCAAE,GAAG,QAAQ;gCAAE,cAAc,EAAE,MAAM,CAAC,KAAK;4BAAC;wBACzE,WAAU;wBACV,MAAM;;;;;;;;;;;;0BAGV,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAM,WAAU;kCAAa;;;;;;kCAC9B,8OAAC;wBACC,MAAK;wBACL,KAAI;wBACJ,KAAI;wBACJ,MAAK;wBACL,OAAO,SAAS,WAAW,IAAI;wBAC/B,UAAU,CAAC,IAAM,YAAY;gCAAE,GAAG,QAAQ;gCAAE,aAAa,WAAW,EAAE,MAAM,CAAC,KAAK;4BAAE;wBACpF,WAAU;;;;;;kCAEZ,8OAAC;kCAAM,SAAS,WAAW;;;;;;;;;;;;0BAE7B,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBACC,MAAK;wBACL,SAAS,IAAM,aAAa;wBAC5B,WAAU;kCACX;;;;;;kCAGD,8OAAC;wBACC,MAAK;wBACL,WAAU;kCACX;;;;;;;;;;;;;;;;;;AAMT"}},
    {"offset": {"line": 684, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 690, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/components/Layout/Sidebar.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Assistant } from '@/types';\nimport AssistantCreator from '@/components/Assistant/AssistantCreator';\nimport AssistantSettings from '@/components/Assistant/AssistantSettings';\n\ninterface SidebarProps {\n  activeAssistant: Assistant | null;\n  onAssistantChange: (assistant: Assistant) => void;\n}\n\nexport default function Sidebar({ activeAssistant, onAssistantChange }: SidebarProps) {\n  const [isCreating, setIsCreating] = useState(false);\n\n  return (\n    <div className=\"p-4\">\n      <button\n        onClick={() => setIsCreating(true)}\n        className=\"w-full bg-blue-500 text-white rounded-md py-2 mb-4\"\n      >\n        Create New Assistant\n      </button>\n\n      {isCreating && (\n        <AssistantCreator\n          onClose={() => setIsCreating(false)}\n          onCreated={(assistant) => {\n            onAssistantChange(assistant);\n            setIsCreating(false);\n          }}\n        />\n      )}\n\n      {activeAssistant && (\n        <AssistantSettings\n          assistant={activeAssistant}\n          onUpdate={onAssistantChange}\n        />\n      )}\n    </div>\n  );\n} "],"names":[],"mappings":";;;;AAAA;AAEA;AACA;;;;;AAOe,SAAS,QAAQ,EAAE,eAAe,EAAE,iBAAiB,EAAgB;IAClF,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE7C,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBACC,SAAS,IAAM,cAAc;gBAC7B,WAAU;0BACX;;;;;;YAIA,4BACC,8OAAC,mJAAA,CAAA,UAAgB;gBACf,SAAS,IAAM,cAAc;gBAC7B,WAAW,CAAC;oBACV,kBAAkB;oBAClB,cAAc;gBAChB;;;;;;YAIH,iCACC,8OAAC,oJAAA,CAAA,UAAiB;gBAChB,WAAW;gBACX,UAAU;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 741, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 747, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/components/Chat/ChatInterface.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Assistant } from '@/types';\nimport OpenAI from 'openai';\n\ninterface RealtimeChatProps {\n  sessionToken: string;\n}\n\nexport function OpenAIConnectionTest() {\n  const [status, setStatus] = useState<'testing' | 'success' | 'error'>('testing');\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const testConnection = async () => {\n      try {\n        const openai = new OpenAI({\n          apiKey: process.env.NEXT_PUBLIC_OPENAI_API_KEY,\n          dangerouslyAllowBrowser: true\n        });\n        await openai.models.list();\n        setStatus('success');\n      } catch (err) {\n        setStatus('error');\n        setError(err instanceof Error ? err.message : 'Unknown error');\n      }\n    };\n\n    testConnection();\n  }, []);\n\n  return (\n    <div className=\"fixed top-4 right-4 p-2 rounded-lg text-sm\">\n      {status === 'testing' && (\n        <span className=\"text-yellow-500\">Testing OpenAI connection...</span>\n      )}\n      {status === 'success' && (\n        <span className=\"text-green-500\">OpenAI connection successful!</span>\n      )}\n      {status === 'error' && (\n        <span className=\"text-red-500\">\n          OpenAI connection failed: {error}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport default function ChatInterface({ \n  assistant,\n  sessionToken \n}: { \n  assistant: Assistant | null;\n  sessionToken: string;\n}) {\n  const [messages, setMessages] = useState<any[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const webSocketRef = useRef<WebSocket | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  useEffect(() => {\n    // Initialize WebRTC connection\n    const pc = new RTCPeerConnection();\n    \n    // Set up audio element for model responses\n    const audioEl = document.createElement(\"audio\");\n    audioEl.autoplay = true;\n    pc.ontrack = e => audioEl.srcObject = e.streams[0];\n    audioRef.current = audioEl;\n\n    // Add local audio track for microphone input\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        pc.addTrack(stream.getTracks()[0]);\n      });\n\n    // Create data channel for events\n    const dc = pc.createDataChannel(\"oai-events\");\n    \n    // Handle incoming messages\n    dc.addEventListener(\"message\", (e) => {\n      const event = JSON.parse(e.data);\n      handleServerEvent(event);\n    });\n\n    // Connect to OpenAI's Realtime API\n    initializeConnection(pc, sessionToken);\n\n    return () => {\n      pc.close();\n      if (audioRef.current) {\n        audioRef.current.srcObject = null;\n      }\n    };\n  }, [sessionToken]);\n\n  const handleServerEvent = (event: any) => {\n    switch (event.type) {\n      case \"response.text.delta\":\n        // Handle incremental text updates\n        setMessages(prev => {\n          const newMessages = [...prev];\n          const lastMessage = newMessages[newMessages.length - 1];\n          if (lastMessage?.role === 'assistant') {\n            lastMessage.content += event.delta;\n          } else {\n            newMessages.push({\n              role: 'assistant',\n              content: event.delta\n            });\n          }\n          return newMessages;\n        });\n        break;\n      \n      // Add other event handlers as needed\n    }\n  };\n\n  const sendMessage = (text: string) => {\n    if (!webSocketRef.current) return;\n\n    // Create conversation item\n    const event = {\n      type: \"conversation.item.create\",\n      item: {\n        type: \"message\",\n        role: \"user\",\n        content: [{\n          type: \"input_text\",\n          text: text\n        }]\n      }\n    };\n\n    webSocketRef.current.send(JSON.stringify(event));\n\n    // Request response from model\n    const responseEvent = {\n      type: \"response.create\",\n      response: {\n        modalities: [\"text\", \"audio\"]\n      }\n    };\n\n    webSocketRef.current.send(JSON.stringify(responseEvent));\n  };\n\n  return (\n    <div className=\"realtime-chat\">\n      <div className=\"messages\">\n        {messages.map((msg, i) => (\n          <div key={i} className={`message ${msg.role}`}>\n            {msg.content}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"input-area\">\n        <input\n          type=\"text\"\n          placeholder=\"Type your message...\"\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              sendMessage(e.currentTarget.value);\n              e.currentTarget.value = '';\n            }\n          }}\n        />\n      </div>\n    </div>\n  );\n}\n\nasync function initializeConnection(pc: RTCPeerConnection, token: string) {\n  // Create and set local description\n  const offer = await pc.createOffer();\n  await pc.setLocalDescription(offer);\n\n  // Get answer from OpenAI\n  const baseUrl = \"https://api.openai.com/v1/realtime\";\n  const model = \"gpt-4o-realtime-preview-2024-12-17\";\n  \n  const response = await fetch(`${baseUrl}?model=${model}`, {\n    method: \"POST\",\n    body: offer.sdp,\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/sdp\"\n    },\n  });\n\n  const answer = {\n    type: 'answer' as const,\n    sdp: await response.text()\n  };\n  \n  await pc.setRemoteDescription(answer);\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 968, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 974, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/app/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { Assistant } from '@/types';\nimport SplitScreen from '@/components/Layout/SplitScreen';\nimport Sidebar from '@/components/Layout/Sidebar';\nimport ChatInterface, { OpenAIConnectionTest } from '@/components/Chat/ChatInterface';\n\nexport default function Home() {\n  const [activeAssistant, setActiveAssistant] = useState<Assistant | null>(null);\n  const [sessionToken, setSessionToken] = useState<string>('');\n\n  return (\n    <main className=\"h-screen\">\n      <OpenAIConnectionTest />\n      <SplitScreen\n        sidebar={\n          <Sidebar\n            activeAssistant={activeAssistant}\n            onAssistantChange={setActiveAssistant}\n          />\n        }\n        content={\n          <ChatInterface\n            assistant={activeAssistant}\n            sessionToken={sessionToken}\n          />\n        }\n      />\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AACA;AACA;AANA;;;;;;AAQe,SAAS;IACtB,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IACzE,MAAM,CAAC,cAAc,gBAAgB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAEzD,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC,2IAAA,CAAA,uBAAoB;;;;;0BACrB,8OAAC,2IAAA,CAAA,UAAW;gBACV,uBACE,8OAAC,uIAAA,CAAA,UAAO;oBACN,iBAAiB;oBACjB,mBAAmB;;;;;;gBAGvB,uBACE,8OAAC,2IAAA,CAAA,UAAa;oBACZ,WAAW;oBACX,cAAc;;;;;;;;;;;;;;;;;AAM1B"}},
    {"offset": {"line": 1028, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}