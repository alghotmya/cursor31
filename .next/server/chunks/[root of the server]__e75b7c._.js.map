{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///Users/ahmedalghotmy/Documents/cursor3/src/app/api/twilio/call/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport twilio from 'twilio';\n\nconst accountSid = process.env.TWILIO_ACCOUNT_SID as string;\nconst authToken = process.env.TWILIO_AUTH_TOKEN as string;\nconst phoneNumber = process.env.TWILIO_PHONE_NUMBER as string;\nconst baseUrl = process.env.NEXT_PUBLIC_BASE_URL as string;\n\nif (!accountSid || !authToken || !phoneNumber || !baseUrl) {\n  throw new Error('Missing required environment variables');\n}\n\nconst client = twilio(accountSid, authToken);\n\nexport async function POST(request: Request) {\n  try {\n    const { phoneNumber: toNumber, sessionToken } = await request.json();\n\n    if (!toNumber || !sessionToken) {\n      throw new Error('Missing phone number or session token');\n    }\n\n    // Create TwiML for the call\n    const twiml = new twilio.twiml.VoiceResponse();\n\n    // Start with media settings\n    twiml.start().stream({\n      name: 'openai_stream',\n      url: 'wss://api.openai.com/v1/audio/realtime',\n      track: 'both_tracks'\n    });\n    \n    // Add a welcome message\n    twiml.say({\n      voice: 'alice',\n      language: 'en-US'\n    }, 'Connected to AI assistant. You can start speaking now.');\n\n    // Connect to OpenAI's realtime API\n    twiml.connect().stream({\n      url: `wss://api.openai.com/v1/audio/realtime?model=gpt-4o-realtime-preview-2024-12-17&auth_token=${encodeURIComponent(sessionToken)}`,\n      track: 'both_tracks',\n      name: 'openai_stream'\n    });\n\n    // Keep the connection alive\n    twiml.pause({ length: 120 });\n\n    try {\n      // Make the call with standard options\n      const call = await client.calls.create({\n        to: toNumber,\n        from: phoneNumber,\n        twiml: twiml.toString(),\n        statusCallback: `${baseUrl}/api/twilio/status`,\n        statusCallbackEvent: ['completed', 'failed', 'answered', 'ringing', 'in-progress'],\n        statusCallbackMethod: 'POST',\n        record: true\n      });\n\n      console.log('Call initiated successfully:', call.sid);\n      return NextResponse.json({ callSid: call.sid });\n    } catch (twilioError: any) {\n      console.error('Twilio error:', {\n        code: twilioError.code,\n        message: twilioError.message,\n        moreInfo: twilioError.moreInfo,\n        status: twilioError.status\n      });\n      throw new Error(`Twilio error: ${twilioError.message}`);\n    }\n  } catch (error: any) {\n    console.error('Error in call route:', error);\n    return NextResponse.json(\n      { error: error.message || 'Failed to initiate call' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,kBAAkB;AACjD,MAAM,YAAY,QAAQ,GAAG,CAAC,iBAAiB;AAC/C,MAAM,cAAc,QAAQ,GAAG,CAAC,mBAAmB;AACnD,MAAM;AAEN,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS;IACzD,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,SAAS,CAAA,GAAA,wIAAA,CAAA,UAAM,AAAD,EAAE,YAAY;AAE3B,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,aAAa,QAAQ,EAAE,YAAY,EAAE,GAAG,MAAM,QAAQ,IAAI;QAElE,IAAI,CAAC,YAAY,CAAC,cAAc;YAC9B,MAAM,IAAI,MAAM;QAClB;QAEA,4BAA4B;QAC5B,MAAM,QAAQ,IAAI,wIAAA,CAAA,UAAM,CAAC,KAAK,CAAC,aAAa;QAE5C,4BAA4B;QAC5B,MAAM,KAAK,GAAG,MAAM,CAAC;YACnB,MAAM;YACN,KAAK;YACL,OAAO;QACT;QAEA,wBAAwB;QACxB,MAAM,GAAG,CAAC;YACR,OAAO;YACP,UAAU;QACZ,GAAG;QAEH,mCAAmC;QACnC,MAAM,OAAO,GAAG,MAAM,CAAC;YACrB,KAAK,CAAC,2FAA2F,EAAE,mBAAmB,eAAe;YACrI,OAAO;YACP,MAAM;QACR;QAEA,4BAA4B;QAC5B,MAAM,KAAK,CAAC;YAAE,QAAQ;QAAI;QAE1B,IAAI;YACF,sCAAsC;YACtC,MAAM,OAAO,MAAM,OAAO,KAAK,CAAC,MAAM,CAAC;gBACrC,IAAI;gBACJ,MAAM;gBACN,OAAO,MAAM,QAAQ;gBACrB,gBAAgB,GAAG,QAAQ,kBAAkB,CAAC;gBAC9C,qBAAqB;oBAAC;oBAAa;oBAAU;oBAAY;oBAAW;iBAAc;gBAClF,sBAAsB;gBACtB,QAAQ;YACV;YAEA,QAAQ,GAAG,CAAC,gCAAgC,KAAK,GAAG;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS,KAAK,GAAG;YAAC;QAC/C,EAAE,OAAO,aAAkB;YACzB,QAAQ,KAAK,CAAC,iBAAiB;gBAC7B,MAAM,YAAY,IAAI;gBACtB,SAAS,YAAY,OAAO;gBAC5B,UAAU,YAAY,QAAQ;gBAC9B,QAAQ,YAAY,MAAM;YAC5B;YACA,MAAM,IAAI,MAAM,CAAC,cAAc,EAAE,YAAY,OAAO,EAAE;QACxD;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAA0B,GACpD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 274, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}